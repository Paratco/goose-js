name: Release

on:
  workflow_dispatch:
    inputs:
        debug:
            description: 'Debug (no version bump, no publish, no tag)'
            required: false
            default: false
            type: boolean

jobs:
  release:
    name: Semantic release
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.PARATCO_BOT_ID }}
          private-key: ${{ secrets.PARATCO_BOT_KEY }}

      - name: Get GitHub App User ID
        id: app-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}
          # Make sure the value of GITHUB_TOKEN will not be persisted in repo's config
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Enable Yarn
        run: corepack enable

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build package
        run: yarn build

      - name: Semantic Release (Debug Dry Run)
        if: ${{ github.event.inputs.debug == 'true' }}
        run: yarn release-dry-debug
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          NPM_TOKEN: ${{ secrets.NPM_WRITE_TOKEN }}
          GIT_AUTHOR_NAME: ${{ steps.app-token.outputs.app-slug }}[bot]
          GIT_COMMITTER_NAME: ${{ steps.app-token.outputs.app-slug }}[bot]
          GIT_AUTHOR_EMAIL: ${{ steps.app-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com
          GIT_COMMITTER_EMAIL: ${{ steps.app-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com
          
      - name: Semantic Release (Dry Run)
        if: ${{ github.event.inputs.debug != 'true' }}
        run: yarn release-dry
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          NPM_TOKEN: ${{ secrets.NPM_WRITE_TOKEN }}
          GIT_AUTHOR_NAME: ${{ steps.app-token.outputs.app-slug }}[bot]
          GIT_COMMITTER_NAME: ${{ steps.app-token.outputs.app-slug }}[bot]
          GIT_AUTHOR_EMAIL: ${{ steps.app-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com
          GIT_COMMITTER_EMAIL: ${{ steps.app-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com
          
      - name: Set version property
        id: version
        run: |
          if [ ! -e .VERSION ]; then
            echo "❌ Can't find .VERSION file"
            exit 1
          fi
          
          VERSION=$(tr -d '\n\r\t[:space:]' < .VERSION)
          
          if [ -z "$VERSION" ]; then
            echo "❌ .VERSION file is empty after trimming"
            exit 1
          fi
          
          echo "✅ Version set to $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Log in to Docker Hub
        if: ${{ github.event.inputs.debug != 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push api
        if: ${{ github.event.inputs.debug != 'true' }}
        uses: docker/build-push-action@v6
        with:
          file: .docker/Dockerfile
          push: true
          tags: |
            paratco/goose-js:${{steps.version.outputs.VERSION}}
            paratco/goose-js:latest

      - name: Generate .dockerbuild
        if: ${{ github.event.inputs.debug != 'true' }}
        run: |
          docker buildx history export --builder default --output builds.dockerbuild

      - name: Semantic Release
        if: ${{ github.event.inputs.debug != 'true' }}
        run: yarn release
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          NPM_TOKEN: ${{ secrets.NPM_WRITE_TOKEN }}
          GIT_AUTHOR_NAME: ${{ steps.app-token.outputs.app-slug }}[bot]
          GIT_COMMITTER_NAME: ${{ steps.app-token.outputs.app-slug }}[bot]
          GIT_AUTHOR_EMAIL: ${{ steps.app-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com
          GIT_COMMITTER_EMAIL: ${{ steps.app-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com
